#include <WiFi.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <PubSubClient.h>
#include <WebServer.h> 

#define SENSOR_PIN 15 
OneWire oneWire(SENSOR_PIN);
DallasTemperature sensors(&oneWire);

#define BUZZER_PIN 13 
#define TEMPERATURA_LIMITE 50.0 

const char* ssid = "Seu Wi-fi";       
const char* password = "Sua senha";         

const char* mqttServer = "broker.hivemq.com"; 
const int mqttPort = 1883;                    
const char* mqttTopic = "seuTopico/temperatura"; 

WiFiClient espClient;
PubSubClient client(espClient);
WebServer server(80); 

unsigned long tempoDeteccao = 0;
unsigned long tempoAcionamento = 0;
unsigned long tempoResposta = 0;

float temperatura = 0.0;

void setup() {
  Serial.begin(115200);
  
  sensors.begin();
  
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  conectarWiFi();

  client.setServer(mqttServer, mqttPort);

  server.on("/", handleRoot); 
  server.begin();
  Serial.println("Servidor web iniciado.");
}

void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  sensors.requestTemperatures();
  temperatura = sensors.getTempCByIndex(0);

  Serial.print("Temperatura: ");
  Serial.print(temperatura);
  Serial.println(" C");

  if (temperatura >= TEMPERATURA_LIMITE) {
    tempoDeteccao = millis();
    digitalWrite(BUZZER_PIN, HIGH);
    tempoAcionamento = millis();
    tempoResposta = tempoAcionamento - tempoDeteccao;
    
    Serial.print("ALERTA: Alta Temperatura! Tempo de resposta do buzzer: ");
    Serial.print(tempoResposta);
    Serial.println(" ms");
  } else {
    digitalWrite(BUZZER_PIN, LOW);
  }

  enviarTemperaturaMQTT(temperatura);

  server.handleClient();

  delay(2000); 
}

void conectarWiFi() {
  Serial.print("Conectando ao Wi-Fi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi conectado.");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Conectando ao MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("Conectado.");
    } else {
      Serial.print("Falha ao conectar. Erro: ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void enviarTemperaturaMQTT(float temperatura) {
  char tempStr[8];
  dtostrf(temperatura, 6, 2, tempStr);
  client.publish(mqttTopic, tempStr);
}

void handleRoot() {
  String html = "<!DOCTYPE html><html lang='pt'><head><meta charset='UTF-8'>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<title>Monitor de Temperatura</title>";
  html += "<style>body {font-family: Arial, sans-serif; text-align: center;}";
  html += "h1 {color: #333;} .alert {color: red; font-weight: bold;}</style>";
  
  html += "<script>";
  html += "function atualizarTemperatura() {";
  html += "  fetch('/').then(response => response.text()).then(data => {";
  html += "    document.body.innerHTML = data;";
  html += "  });";
  html += "}";
  html += "setInterval(atualizarTemperatura, 5000);"; 
  html += "</script></head><body>";

  html += "<h1>Monitoramento de Temperatura</h1>";
  html += "<p>Temperatura Atual: " + String(temperatura) + " °C</p>";

  if (temperatura >= TEMPERATURA_LIMITE) {
    html += "<p class='alert'>ALERTA: Temperatura Alta!!!</p>";
  } else {
    html += "<p>Status: Temperatura Normal</p>";
  }

  html += "</body></html>";

  server.send(200, "text/html", html);
}
